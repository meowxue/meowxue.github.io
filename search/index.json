[{"content":"在日常数据库管理中，我们经常遇到需要处理字段中包含空格、回车符等特殊字符的情况。这些不可见字符不仅影响数据展示，还会导致数据处理异常和查询结果错误。本文将详细讲解如何在SQL中检测并清洗这些特殊字符。\n一、为什么需要关注空格和回车符？ 空格和回车符是常见的\u0026quot;不可见字符\u0026quot;，但它们可能带来严重问题：\n数据处理错误：\u0026ldquo;A123\u0026rdquo; 和 \u0026ldquo;A 123\u0026rdquo; 会被系统视为不同值 查询失效：用户搜索 \u0026ldquo;关键字\u0026rdquo; 无法匹配 \u0026ldquo;关键 字\u0026rdquo; 系统集成问题：API接口可能因回车符解析失败 显示异常：网页或报表出现意外换行或空白 二、检测字段中的空格和回车符 1. 通用方法：使用LIKE操作符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -- 检测空格 SELECT * FROM 表名 WHERE 字段名 LIKE \u0026#39;% %\u0026#39;; -- 检测回车符（换行符） SELECT * FROM 表名 WHERE 字段名 LIKE \u0026#39;%\\n%\u0026#39; -- MySQL OR 字段名 LIKE \u0026#39;%\u0026#39; + CHAR(10) + \u0026#39;%\u0026#39;; -- SQL Server -- 同时检测空格和回车 SELECT * FROM 表名 WHERE 字段名 LIKE \u0026#39;% %\u0026#39; OR 字段名 LIKE \u0026#39;%\\n%\u0026#39;; 2. 高级方法：正则表达式匹配 不同数据库系统的正则表达式函数：\n数据库 函数 示例查询 MySQL REGEXP WHERE 字段名 REGEXP \u0026lsquo;[ \\n]\u0026rsquo; Oracle REGEXP_LIKE `WHERE REGEXP_LIKE(字段名, ' PostgreSQL ~ `WHERE 字段名 ~ ' SQL Server LIKE + 通配符 使用CHAR()函数组合 1 2 3 4 5 -- 检测所有空白字符（包括Tab） -- MySQL示例 SELECT * FROM products WHERE product_name REGEXP \u0026#39;\\\\s\u0026#39;; 三、去除空格和回车符的方法 1. 去除空格 - 基础方案 1 2 3 4 5 6 7 8 -- 去除所有空格（简单高效） UPDATE 表名 SET 字段名 = REPLACE(字段名, \u0026#39; \u0026#39;, \u0026#39;\u0026#39;) WHERE 字段名 LIKE \u0026#39;% %\u0026#39;; -- 仅去除首尾空格（保留中间空格） UPDATE 表名 SET 字段名 = TRIM(字段名); -- 所有现代数据库支持 2. 去除回车符 - 跨平台方案 1 2 3 4 5 6 7 8 -- 通用去除回车/换行符方法 UPDATE 表名 SET 字段名 = REPLACE(REPLACE(字段名, \u0026#39;\\r\u0026#39;, \u0026#39;\u0026#39;), \u0026#39;\\n\u0026#39;, \u0026#39;\u0026#39;) WHERE 字段名 LIKE \u0026#39;%\\n%\u0026#39; OR 字段名 LIKE \u0026#39;%\\r%\u0026#39;; -- SQL Server专用 UPDATE 表名 SET 字段名 = REPLACE(REPLACE(字段名, CHAR(13), \u0026#39;\u0026#39;), CHAR(10), \u0026#39;\u0026#39;); 3. 高级清洗：正则表达式替换 1 2 3 4 5 6 7 8 9 10 11 12 13 -- MySQL: 去除所有空白字符 UPDATE customers SET customer_name = REGEXP_REPLACE(customer_name, \u0026#39;\\\\s+\u0026#39;, \u0026#39;\u0026#39;) WHERE customer_name REGEXP \u0026#39;\\\\s\u0026#39;; -- Oracle: 去除回车和换行 UPDATE orders SET order_notes = REGEXP_REPLACE(order_notes, \u0026#39;(\\r|\\n)+\u0026#39;, \u0026#39;\u0026#39;) WHERE REGEXP_LIKE(order_notes, \u0026#39;\\r|\\n\u0026#39;); -- PostgreSQL: 替换多种空白字符 UPDATE products SET description = REGEXP_REPLACE(description, \u0026#39;\\s+\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;g\u0026#39;); 四、完整数据清洗方案 1. 四步清洗法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 -- 步骤1: 创建备份 CREATE TABLE customer_backup AS SELECT * FROM customers; -- 步骤2: 去除特殊字符 UPDATE customers SET name = TRIM(REPLACE(REPLACE(REPLACE(name, CHAR(13), \u0026#39;\u0026#39;), CHAR(10), \u0026#39;\u0026#39;), \u0026#39; \u0026#39;, \u0026#39; \u0026#39;)), address = REGEXP_REPLACE(address, \u0026#39;\\s+\u0026#39;, \u0026#39; \u0026#39;) WHERE name LIKE \u0026#39;% %\u0026#39; OR name LIKE \u0026#39;%\u0026#39; + CHAR(10) + \u0026#39;%\u0026#39;; -- 步骤3: 验证清洗结果 SELECT * FROM customers WHERE name REGEXP \u0026#39;\\\\s\u0026#39; OR address LIKE \u0026#39;%\\n%\u0026#39;; -- 步骤4: 添加数据约束（防止未来问题） ALTER TABLE customers ADD CONSTRAINT chk_name_format CHECK (name NOT LIKE \u0026#39;% %\u0026#39; AND name NOT LIKE \u0026#39;%\u0026#39; + CHAR(10) + \u0026#39;%\u0026#39;); 2. 创建清洗存储过程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 CREATE PROCEDURE CleanCustomerData() BEGIN -- 记录开始时间 DECLARE @StartTime DATETIME = GETDATE(); -- 执行清洗 UPDATE customers SET name = dbo.RemoveWhitespace(name) WHERE name LIKE \u0026#39;%[ \u0026#39; + CHAR(9) + CHAR(10) + CHAR(13) + \u0026#39;]%\u0026#39;; -- 记录操作日志 INSERT INTO CleanLog(TableName, RowsAffected, Duration) VALUES (\u0026#39;customers\u0026#39;, @@ROWCOUNT, DATEDIFF(SECOND, @StartTime, GETDATE())); END; 3. 性能优化技巧 处理大数据集时：\n1. ​​分批处理​​：每次处理10,000行，避免锁表 1 2 3 4 5 6 WHILE EXISTS (SELECT 1 FROM products WHERE description LIKE \u0026#39;% %\u0026#39;) BEGIN UPDATE TOP (10000) products SET description = REPLACE(description, \u0026#39; \u0026#39;, \u0026#39;\u0026#39;) WHERE description LIKE \u0026#39;% %\u0026#39;; END 2. ​​索引优化​​：在过滤条件字段建立索引 1 CREATE INDEX idx_temp ON products (description) WHERE description LIKE \u0026#39;% %\u0026#39;; 3. ​​异步处理​​：大表操作使用后台任务 五、最佳实践与经验总结 1. ​​预防优于治疗​​ 应用层：输入校验使用正则表达式 /[^\\s]/ 数据库层：创建检查约束 1 2 3 ALTER TABLE users ADD CONSTRAINT chk_username_format CHECK (username NOT LIKE \u0026#39;% %\u0026#39; AND username NOT LIKE CHAR(10) + \u0026#39;%\u0026#39;); 2. 特殊场景处理 需要保留单个空格时：REGEXP_REPLACE(name, \u0026rsquo; {2,}\u0026rsquo;, \u0026rsquo; \u0026lsquo;) 处理TAB符：REPLACE(字段名, CHAR(9), \u0026lsquo;\u0026rsquo;) 保留回车符的格式化文本：使用\n替代 3. 多语言环境考虑 中文空格处理：REPLACE(字段名, N\u0026rsquo;　\u0026lsquo;, \u0026lsquo;\u0026rsquo;) （全角空格） Unicode空白字符：\\p{Z} 正则表达式类别 4. 监控与报警 1 2 3 4 5 6 7 8 9 10 11 12 13 -- 每日检查异常数据 SELECT table_name, column_name, COUNT(*) FROM information_schema.columns c JOIN ( SELECT \u0026#39; \u0026#39; AS pattern UNION SELECT CHAR(10) UNION SELECT CHAR(13) ) patterns WHERE c.column_name NOT LIKE \u0026#39;%id\u0026#39; -- 排除ID字段 AND EXISTS ( SELECT 1 FROM table_name WHERE QUOTE_IDENT(column_name) LIKE \u0026#39;%\u0026#39; + patterns.pattern + \u0026#39;%\u0026#39; ) GROUP BY table_name, column_name; 六、结语 正确处理数据库中的空格和回车符是保证数据质量的基础操作。通过本文介绍的检测方法：\n1.使用LIKE进行快速筛查 2.利用正则表达式进行复杂匹配 3.结合REPLACE和TRIM高效清洗 以及清洗策略：\n基础替换去除非必需空白字符 正则表达式处理复杂场景 完整的数据清洗工作流 您不仅能够解决当前数据质量问题，还能建立长效预防机制，确保数据库始终保持良好的数据状态。记住，每次数据清洗前务必备份数据，重要操作在测试环境验证后再应用于生产环境。\n","date":"2025-06-11T00:00:00Z","permalink":"hugo-theme-stack/p/%E6%A3%80%E6%B5%8B%E5%B9%B6%E5%8E%BB%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%AD%97%E6%AE%B5%E4%B8%AD%E7%9A%84%E7%A9%BA%E6%A0%BC%E4%B8%8E%E5%9B%9E%E8%BD%A6%E7%AC%A6/","title":"检测并去除数据库表字段中的空格与回车符"},{"content":"今天是周六，而且是还是阴历的四月二十，知道我为什么强调阴历吗，因为今天有大集，早就想去逛逛了，今天目的很简单——去购买食材。\n八点钟就起床了，没有睡懒觉的习惯，对于我来说放假多睡一秒那都是浪费！磨磨蹭蹭了一会儿九点钟出门了，我在网上查我所要去的集市每逢阴历五、十都会开，但我还是想确定一下，正好出了电梯看到一位奶奶在哄他的孙子，于是我就问了这位奶奶得到了我想要的答案。出了小区刚到公交站我就发现了不一般，我看到很多爷爷奶奶再等公交车，而且手里还握着那种简便的买菜车，一看就是去赶集的。\n坐上公交车来到大集，刚下车就能看到密密麻麻的人头，我还是第一次逛家乡以外的集市，咱先不买东西先逛逛，看看都有什么好吃的好玩的。\n走过去还没进门，就看到有摆摊的，最让我意想不到的是居然有卖蝎子的，这东西买来干什么用？记得在我小时候这东西都是用来泡酒，受伤之后涂抹用，后来我问了同事他说是用来吃的，好吧，虽然可行，但我真没往吃上想。\n进到里面，寸步难行，就那么窄的小路还有骑电车的，只能一点一点挪步，走了一会儿，有一个卖猪肉的摊子，我一眼就盯上了摊子上的肘子，从去年开始我就想做一顿肘子试试，这下有机会了，花费53元。拿到手里就很重，不如逛完再买了，袋子很勒手，得加快步伐了，下面目标就是小龙虾和生蚝了。2斤小龙虾，四斤生蚝（十二个）到手。在集市的外围的摊子中我还买了手工的烟卷，这下可以打道回府了，我还有很多想卖的，奈何我已经没法再拎了。这两天有口福喽！\n回到家里十点钟左右，我打算先吃小龙虾，晚上生蚝，明天炖肘子，计划通！说干就干，处理小龙虾还挺麻烦的，抽虾线、刷干净、剪头、开背，虽麻烦但是这也是做饭的乐趣之一。\n我狂炫，小酌了几杯，2斤都被我吃完了，哈哈，爽了。\n到下午大概五点钟，我开始处理生蚝，准备做蒜蓉粉丝的生蚝。生蚝也是真的脏，我拿出钢丝球一顿刷，全是泥沙，蒸完开壳的时候手还被壳划伤了，不过没有关系，我会多吃几个的。我记得去年的时候被人说 “小小年纪瞎吃什么，你又不用补”，我虽然没有女朋友，但是我馋啊，只是为了满足我的胃。\r就不重新写了，接着昨天的写吧。今天处理大肘子！\n本来想的是，早上早点起床，然后把肘子炖上，等到中午的时候正好可以吃，不过我没起来，所以中午才开始做。\n还好有个蒸锅，不然都炖不下，满满一大锅😄️ 12点多炖上，炖了三个小时，闷了两个小时，不得不说真的是烂糊，嘎嘎香，唯一的缺点就是口味稍淡。吃了大概三分之一，炫了一大碗米。 我好气啊😭️ 我的大肘子坏了，浪费了，啊啊啊，好难受😭️😭️😭️ 本来想着下班回来再美美吃一顿的，它酸了，坏掉了，怪我忘记放冰箱。\n","date":"2025-05-17T00:00:00Z","permalink":"hugo-theme-stack/p/%E9%80%8D%E9%81%A5%E6%97%B6%E5%85%8920250517/","title":"逍遥时光(20250517)"},{"content":"之前很想尝试做凉皮，奈何没有制作工具，所以一直没有动手，在一次下班回去的路上，我看到街边的小贩有卖凉皮的，又重新点燃了我想做凉皮的欲望，在拼夕夕上一搜索，还真的不贵，十几块就可以买到蒸凉皮用的锣，还送了很多小工具，我果断下单。到货就赶紧尝试起来了。\n凉皮的做法其实不难，难点主要就在洗面和蒸的时候的面浆放多少，还有需要蒸的时间。在工具到的前一天晚上，我就开始准备洗面浆了，洗出了两大盆，洗出的面浆还需要沉淀一晚才可以用，明天晚上就可以开蒸啦。\n第二天下班在菜鸟驿站取到工具后，我就迫不急待的想要尝试了。看到冰箱了昨天洗出的面浆沉淀的非常好（都放一天了，能不好吗），到掉沉淀完的水，留下沉淀好的面浆，像非牛顿流体，用工具把面浆搅匀，起锅烧水，开蒸！前几次没有掌握好面浆的量，蒸的有点厚，口感不是很好，尝试几次后就熟练掌握了，凉皮get！半斤面粉蒸了好多张，虽然我蒸的比较薄吧，但是份量在那摆着呢。我有做了个辣椒油和料水，自己亲手做了才知道，这凉皮的利润很高呀，用的东西也很简单，最基本的就是面粉，然后就是芝麻酱、料水、辣椒这些东西，一碗凉皮的成本也就2块钱到3块钱。朋友说我可以出去摆摊卖凉皮了，哈哈哈😄️\n","date":"2025-04-23T00:00:00Z","permalink":"hugo-theme-stack/p/%E5%81%9A%E5%87%89%E7%9A%AE/","title":"做凉皮"},{"content":"Oracle数据库备份的DMP文件如何还原到数据库中，或者还原到另外一个Oracle数据库中\n下面这个命令在oracle所在服务器中根据自身情况修改后执行：\n1 impdp username/password@orcl directory=dbbackup dumpfile=backupfilename.DMP schemas=xxdb remap_schema=xxdb:newxxdb 接下来对命令进行解析：\nusername/password： 数据库用户的用户名和密码，如果是新用户那就填写信息用户的信息\n**orcl：**数据库实例名\ndirector=dbbackup： 备份文件所在的目录，这个是需要提前创建好的 创建目录：\n1 create directory dbbackup as \u0026#39;D:\\dbBackup\u0026#39;; dumpfile=backupfilename.DMP： dmp文件文件名\n**schemas=xxdb：**原数据库用户名，备份时候的用户名\nremap_schema=xxdb:newxxdb： 重新命名用户，旧的用户名 ： 新的用户名。这一项非必须如果是还原到一个新用户上需要填写 创建新用户命令：\n1 2 3 create user 用户名 identified by 密码 default tablespace 表空间 temporary tablespace 临时表空间; grant connect,resource,dba to 用户名; ","date":"2024-10-25T00:00:00Z","permalink":"hugo-theme-stack/p/oracle%E6%95%B0%E6%8D%AE%E6%B3%B5%E5%AF%BC%E5%87%BA%E7%9A%84dmp%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F/","title":"Oracle数据泵导出的DMP文件还原 "},{"content":"项目中有用到人大金仓的数据库，但是这个包，在maven仓库中找不到，所以需要手动安装到仓库中。在此记录如何将下载好的jar包安装到仓库中。\n命令格式如下:\n1 mvn -s /home/meowxue/Dev/environment/apache-maven-3.9.8/conf/settings-private.xml install:install-file -DgroupId=com.kingbase8 -DartifactId=kingbase8 -Dversion=8.6.0 -Dfile=/home/meowxue/下载/kingbase8/kingbase8/8.6.0/kingbase8-8.6.0.jar -Dpackaging=jar -DgeneratePom=true 说明：\n-s：指定settings.xml文件路径\r-DgroupId：jar包所在组，对应pom.xml中的groupId\r-DartifactId：jar包名称，对应pom.xml中的artifactId\r-Dversion：jar包版本，对应pom.xml中的version\r-Dfile：jar包路径\r-Dpackaging：jar包类型（一般都为jar）\r-DgeneratePom=true：是否生成对应的pom.xml文件 ","date":"2024-08-10T00:00:00Z","permalink":"hugo-theme-stack/p/maven%E5%AE%89%E8%A3%85%E6%9C%AC%E5%9C%B0%E7%9A%84jar%E5%8C%85%E5%88%B0%E4%BB%93%E5%BA%93/","title":"maven安装本地的jar包到仓库"},{"content":"事情是这样的，我用java写了个运维的程序，在服务器上定时给我发送程序的运行状态和日志。写好后放到服务器上做了一个定时任务，通过windows自带的计划任务来执行bat脚本。但是我发现双击bat脚本执行是没有问题的，但是在计划任务执行的时候就会失败，运行结果为0x1。\n报错原因：程序和脚本中的bat脚本带有目录结构，但是起始的哪里没有配置批处理脚本所在目录路径\n在红框处配置bat脚本文件的路径就可以执行成功了。\n","date":"2024-06-05T00:00:00Z","permalink":"hugo-theme-stack/p/windows%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E4%B8%BA0x1/","title":"Windows计划任务执行结果为0x1"},{"content":"脚本准备 1 2 3 4 5 6 rem delete 10 days files forfiles /p \u0026#34;文件路径\u0026#34; /d -10 /c \u0026#34;cmd /c echo deleting @file ... \u0026amp;\u0026amp; del /f @path\u0026#34; rem expdp sz set sz_file=备份文件名字%date:~0,4%%date:~5,2%%date:~8,2% expdp 数据库用户名/数据库密码@数据库实例名 directory=路径对象 dumpfile=%sz_file%.dmp logfile=%sz_file%.log schemas=导出的用户 compression=all 在合适的位置新建一个.bat文件，将上面的脚本复制到里面，再根据下面的说明修改好脚本。\n注：如果密码中存在特殊字符，需要做特殊处理，如：\n1 zhangsan/\u0026#34;\u0026#34;\u0026#34;abc@123\u0026#34;\u0026#34;\u0026#34;@orcl 文件路径: 备份文件所在目录\n-10: 删除两天前的文件，也就是说保留两天的数据，可根据实际情况修改\n备份文件名字: 此处为前缀加时间的格式 例如：xxxxx202308025120000.dmp\n数据库实例名: 如：orcl，有时候可能需要补全ip地址，如：192.168.3.10/orcl\n路径对象: 导出文件目录，此处的目录和平常的目录不同，这是存在于数据库中的目录对象，要使用这个对象需要用sql命令来创建\n1 CREATE DIRECTORY hrpbackup AS \u0026#39;备份文件要存放的路径\u0026#39;; 1 SELECT directory_name, directory_path FROM all_directories; 导出的用户: 此处为指定导出的用户，建议和数据库的用户名一致\n脚本调整好后，可以双击启动测试是否能够成功备份。\n开启服务器的定时任务 利用windows服务器中的任务计划程序，来定时执行数据库的备份脚本。\n打开任务计划程序 Win + R 打开运行窗口，输入 taskschd.msc 确定，打开任务计划程序\n创建基本任务 点击左侧 创建基本任务\n选择维护好的脚本\n","date":"2023-11-10T00:00:00Z","permalink":"hugo-theme-stack/p/windows%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%ADoracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD/","title":"Windows服务器中Oracle数据库定时备份"},{"content":"概述 大多数的linux发行版都默认安装了corn服务和crontab工具。cron服务是一个用于执行定时任务的后台服务，而crontab是用于编辑和管理用户的定时任务的命令行工具。通过crontab工具，用户可以添加、编辑、删除定时任务的执行时间和要运行的命令或者脚本。\n利用定时执行备份的shell脚本。\nshell脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/bin/bash #配置数据库的环境变量 export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/db_1/ export PATH=$ORACLE_HOME/bin:$PATH #备份文件存放位置 BACKUP=/usr/local/DBback/ #数据库目录对象 DIRECTORY=HRPBACKUP #当前时间 DATETIME=$(date +%Y-%m-%d_%H%M%S) echo $DATETIME #数据库地址 HOST=127.0.0.1/orcl USERNAME=username PASSWORD=123456 #创建备份目录，如果不存在就创建 [ ! -d \u0026#34;${BACKUP}\u0026#34; ] \u0026amp;\u0026amp; mkdir -p \u0026#34;${BACKUP}\u0026#34; #打印导出命令 echo \u0026#34;expdp ${USERNAME}/${PASSWORD}@${HOST} directory=${DIRECTORY} dumpfile=${DATETIME}_back.dmp logfile=${DATETIME}.log schemas=${USERNAME} compression=all\u0026#34; #备份数据库 expdp ${USERNAME}/${PASSWORD}@${HOST} directory=${DIRECTORY} dumpfile=${DATETIME}_back.dmp logfile=${DATETIME}.log schemas=${USERNAME} compression=all #删除10天前的数据 find ${BACKUP} -atime +10 -name \u0026#34;*_back.dmp\u0026#34; -exec rm -ef {} \\; echo \u0026#34;备份完成\u0026#34; 注意的点和相关的问题 1.为什么要再次设置环境变量? 1 2 3 #配置数据库的环境变量 export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/db_1/ export PATH=$ORACLE_HOME/bin:$PATH cron运行的环境和正常的shell执行环境不同。在正常情况下直接执行备份的shell脚本 expdp 命令可以被正确识别，但放到 crontab 中，expdp 命令将会出错，错误信息大概如下：\n1 2 UDE-00013: Message 13 not found; No message file for product=RDBMS, facility=UDE UDE-00019: You may need to set ORACLE_HOME to your Oracle software directory export 将变量设置为环境变量，并且在当前shell会话及子进程中可见和可访问。\n2.数据库目录对象 此处为oracle的文件目录对象,类似于将路径起个变量名，并将这种对应关系保存在数据库中。\n查询所有文件目录\n1 SELECT directory_name, directory_path FROM all_directories; 查询结果中的 directory_path 要与 脚本中的 BACKUP 路径一致。\n创建文件目录\n1 CREATE DIRECTORY hrpbackup AS \u0026#39;备份文件要存放的路径\u0026#39;; 授予公共用户对目录（directory）的读取和写入权限。（非必须）\n1 grant read,write on directory 目录对象 to public; 3.脚本完成后 给脚本添加可执行权限\n1 chmod +x 备份.sh 创建的目录 BACKUP 也需要设置权限\n1 chmod 777 /usr/local/DBback 定时 查询当前所有的定时任务\n1 crontab -l 编辑定时任务\n1 crontab -e crontab 相关命令\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 (1) 语法 crontab [-u \u0026lt;用户名称\u0026gt;][配置文件] 或 crontab { -l | -r | -e } -u #\u0026lt;用户名称\u0026gt; 是指设定指定\u0026lt;用户名称\u0026gt;的定时任务，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的定时任务。 -l #列出该用户的定时任务设置。 -r #删除该用户的定时任务设置。 -e #编辑该用户的定时任务设置。 (2) 命令时间格式： * * *　*　*　command 分　时　日　月　周　命令 第1列表示分钟1～59 每分钟用*或者 */1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 (3)一些Crontab定时任务例子： 30 21 * * * /usr/local/etc/rc.d/lighttpd restart #每晚的21:30 重启apache 45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart #每月1、10、22日的4 : 45重启apache 10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart #每周六、周日的1 : 10重启apache 0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart #每天18 : 00至23 : 00之间每隔30分钟重启apache 0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart #每星期六的11 : 00 pm重启apache * 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart #晚上11点到早上7点之间，每隔一小时重启apache * */1 * * * /usr/local/etc/rc.d/lighttpd restart #每一小时重启apache 0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart #每月的4号与每周一到周三的11点重启apache 0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart #一月一号的4点重启apache */30 * * * * /usr/sbin/ntpdate cn.pool.ntp.org #每半小时同步一下时间 0 */2 * * * /sbin/service httpd restart #每两个小时重启一次apache 50 7 * * * /sbin/service sshd start #每天7：50开启ssh服务 50 22 * * * /sbin/service sshd stop #每天22：50关闭ssh服务 0 0 1,15 * * fsck /home #每月1号和15号检查/home 磁盘 1 * * * * /home/bruce/backup #每小时的第一分执行 /home/bruce/backup这个文件 00 03 * * 1-5 find /home \u0026#34;*.xxx\u0026#34; -mtime +4 -exec rm {} \\; #每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。 30 6 */10 * * ls #每月的1、11、21、31日是的6：30执行一次ls命令 例如：每天晚上11点30分执行定时备份脚本 /usr/local/backup.sh\n路径要写全\n1 30 11 * * * /usr/local/backup.sh crontab在线工具 https://tool.lu/crontab\n","date":"2023-08-30T00:00:00Z","permalink":"hugo-theme-stack/p/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%ADoracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD/","title":"Linux服务器中Oracle数据库定时备份"},{"content":"和外部系统做对接，对方提供了一个存储过程，对方为sqlserver数据库，我方为oracle数据库。 需求简单来说就是调用对方的存储过程获得结果，转储到我方库，后续在对数据进行处理。\n我写了个代码片段做测试，用jdbc来调用对方的存储过程，可是在调用后就直接报错了，错误信息如下\n1 com.microsoft.sqlserver.jdbc.SQLServerException: 该语句没有返回结果集 我就不理解了，为啥用数据库连接工具调就没问题呢？是有结果集的呀。\n疯狂找资料，找帖子。最后终于是找到了。\n解决方法：\n换驱动包。对方数据库是SQL server2008，我用的是 sqljdbc4-4.0 。直接换了第三方开源的SQL Server数据库的JDBC驱动程序 jtds1.2。问题解决，调用存储过程的时候不再出错。 在存储过程首行添加 set nocount on （这个我没实验，因为存储过程没在我手里，操作不到） 最后记录一段jdbc调用存储结构的代码，一个参数，返回结果集\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 import java.sql.CallableStatement; import java.sql.Connection; import java.sql.DriverManager; import java.sql.ResultSet; import java.sql.Statement; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Calendar; import java.util.Date; import java.util.HashMap; import java.util.List; import java.util.Map; public class Test { final static String SERVERURL = \u0026#34;jdbc:jtds:sqlserver://127.0.0.1:1433;DatabaseName=XXX\u0026#34;; final static String SERVERDriver = \u0026#34;net.sourceforge.jtds.jdbc.Driver\u0026#34;; final static String SERVERUSERNAME = \u0026#34;username\u0026#34;; final static String SERVERPASSWORD = \u0026#34;password\u0026#34;; public static void main(String[] args) { try { //调用存储过程 Class.forName(SERVERDriver); Connection conn = DriverManager.getConnection(SERVERURL, SERVERUSERNAME, SERVERPASSWORD); System.out.println(\u0026#34;sql server连接成功\u0026#34;); String call = \u0026#34;{call 存储过程名称(?)}\u0026#34;; CallableStatement callableStatement = conn.prepareCall(call); callableStatement.setString(1, \u0026#34;2022-10-13\u0026#34;); ResultSet rs = callableStatement.executeQuery(); while(rs.next()) { System.out.println(rs.getString(\u0026#34;aaa\u0026#34;)); System.out.println(rs.getString(\u0026#34;bbb\u0026#34;)); System.out.println(rs.getString(\u0026#34;ccc\u0026#34;)); System.out.println(rs.getString(\u0026#34;ddd\u0026#34;)); } callableStatement.close(); conn.close(); } catch (Exception e) { e.printStackTrace(); } } } ","date":"2022-10-13T00:00:00Z","permalink":"hugo-theme-stack/p/%E7%94%A8sqlserver%E5%AE%98%E6%96%B9%E9%A9%B1%E5%8A%A8%E5%8C%85%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/","title":"用sqlserver官方驱动包调用存储过程遇到的一个坑"},{"content":"NVM 是一个非常方便的node包管理工具，可以实现在NodeJS 各个不同版本之间自由的进行切换。 1.下载nvm安装包 官网地址： https://github.com/nvm-sh/nvm\n可选择最新的Releases版本，下面用0.38.0这个版本做示范\n示例版本地址：https://github.com/nvm-sh/nvm/archive/refs/tags/v0.38.0.tar.gz\n2.解压nvm 1 tar -zxvf nvm-0.38.0.tar.gz 可以移动解压的文件到你想放的目录\n3.配置环境 打开 ~/.bashrc\n1 vim ~/.bashrc 在 ~/.bashrc 的末尾加上以下的语句\n1 2 3 4 5 export NVM_DIR=\u0026#34;$HOME/nvm所在的目录\u0026#34; [ -s \u0026#34;$NVM_DIR/nvm.sh\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/nvm.sh\u0026#34; # This loads nvm [ -s \u0026#34;$NVM_DIR/bash_completion\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/bash_completion\u0026#34; # This loads nvm bash_completion # nodejs下载更换淘宝镜像 export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node 4.编译生效 1 source ~/.bashrc 验证是否成功，终端输入以下命令查看nvm版本号\n1 nvm -v 显示安装的版本号，即成功\n5.nvm常用命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #查询目前线上所能安装的所有nodejs版本 nvm ls-remote #安装相应版本nodejs nvm install 14.19.3 #使用相应版本的nodejs nvm use 14.19.3 #列出已经安装的版本 nvm ls #卸载相应的nodejs nvm uninstall 14.19.3 #查看当前版本 nvm current 6.npm使用淘宝镜像 打开nvm目录下的 .npmrc在文件中添加下面的内容\n1 registry=https://registry.npm.taobao.org ","date":"2022-05-27T00:00:00Z","permalink":"hugo-theme-stack/p/linux%E4%B8%AD%E5%AE%89%E8%A3%85nvm/","title":"Linux中安装nvm"}]